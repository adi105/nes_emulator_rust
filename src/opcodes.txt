// File to store 6502 OPcodes in a neat fashion. There are a lot.
use crate::cpu::AddressingMode;
use std::collections::HashMap;
// struct for each opcode
pub struct OpCode {
    pub code:u8,
    pub mnemonic: &'static str,
    pub length: u8,
    pub cycles: u8,
    pub mode: AddressingMode,
}

impl OpCode {
    fn new(code: u8, mnemonic: &'static str, length: u8, cycles: u8, mode: AddressingMode) -> Self {
        OpCode {
            code : code,
            mnemonic : mnemonic,
            length : length,
            cycles : cycles,
            mode : mode,
        }
    }
}

lazy_static! {
    pub static ref CPU_OP_CODES: Vec<OpCode> = vec![
        // opcode list taken from online resource
        OpCode::new(0x00, "BRK", 1, 7, AddressingMode::NoneAddressing),
        OpCode::new(0xea, "NOP", 1, 2, AddressingMode::NoneAddressing),

        /* Shifts */
        OpCode::new(0x0a, "ASL", 1, 2, AddressingMode::NoneAddressing),
        OpCode::new(0x06, "ASL", 2, 5, AddressingMode::ZP0),
        OpCode::new(0x16, "ASL", 2, 6, AddressingMode::ZPX),
        OpCode::new(0x0e, "ASL", 3, 6, AddressingMode::ABS),
        OpCode::new(0x1e, "ASL", 3, 7, AddressingMode::ABX),

        OpCode::new(0x4a, "LSR", 1, 2, AddressingMode::NoneAddressing),
        OpCode::new(0x46, "LSR", 2, 5, AddressingMode::ZP0),
        OpCode::new(0x56, "LSR", 2, 6, AddressingMode::ZPX),
        OpCode::new(0x4e, "LSR", 3, 6, AddressingMode::ABS),
        OpCode::new(0x5e, "LSR", 3, 7, AddressingMode::ABX),

        OpCode::new(0x2a, "ROL", 1, 2, AddressingMode::NoneAddressing),
        OpCode::new(0x26, "ROL", 2, 5, AddressingMode::ZP0),
        OpCode::new(0x36, "ROL", 2, 6, AddressingMode::ZPX),
        OpCode::new(0x2e, "ROL", 3, 6, AddressingMode::ABS),
        OpCode::new(0x3e, "ROL", 3, 7, AddressingMode::ABX),

        OpCode::new(0x6a, "ROR", 1, 2, AddressingMode::NoneAddressing),
        OpCode::new(0x66, "ROR", 2, 5, AddressingMode::ZP0),
        OpCode::new(0x76, "ROR", 2, 6, AddressingMode::ZPX),
        OpCode::new(0x6e, "ROR", 3, 6, AddressingMode::ABS),
        OpCode::new(0x7e, "ROR", 3, 7, AddressingMode::ABX),

        OpCode::new(0xe6, "INC", 2, 5, AddressingMode::ZP0),
        OpCode::new(0xf6, "INC", 2, 6, AddressingMode::ZPX),
        OpCode::new(0xee, "INC", 3, 6, AddressingMode::ABS),
        OpCode::new(0xfe, "INC", 3, 7, AddressingMode::ABX),

        OpCode::new(0xe8, "INX", 1, 2, AddressingMode::NoneAddressing),
        OpCode::new(0xc8, "INY", 1, 2, AddressingMode::NoneAddressing),

        OpCode::new(0xc6, "DEC", 2, 5, AddressingMode::ZP0),
        OpCode::new(0xd6, "DEC", 2, 6, AddressingMode::ZPX),
        OpCode::new(0xce, "DEC", 3, 6, AddressingMode::ABS),
        OpCode::new(0xde, "DEC", 3, 7, AddressingMode::ABX),

        OpCode::new(0xca, "DEX", 1, 2, AddressingMode::NoneAddressing),
        OpCode::new(0x88, "DEY", 1, 2, AddressingMode::NoneAddressing),

        OpCode::new(0xc9, "CMP", 2, 2, AddressingMode::IMM),
        OpCode::new(0xc5, "CMP", 2, 3, AddressingMode::ZP0),
        OpCode::new(0xd5, "CMP", 2, 4, AddressingMode::ZPX),
        OpCode::new(0xcd, "CMP", 3, 4, AddressingMode::ABS),
        OpCode::new(0xdd, "CMP", 3, 4/*+1 if page crossed*/, AddressingMode::ABX),
        OpCode::new(0xd9, "CMP", 3, 4/*+1 if page crossed*/, AddressingMode::ABY),
        OpCode::new(0xc1, "CMP", 2, 6, AddressingMode::IZX),
        OpCode::new(0xd1, "CMP", 2, 5/*+1 if page crossed*/, AddressingMode::IZY),

        OpCode::new(0xc0, "CPY", 2, 2, AddressingMode::IMM),
        OpCode::new(0xc4, "CPY", 2, 3, AddressingMode::ZP0),
        OpCode::new(0xcc, "CPY", 3, 4, AddressingMode::ABS),

        OpCode::new(0xe0, "CPX", 2, 2, AddressingMode::IMM),
        OpCode::new(0xe4, "CPX", 2, 3, AddressingMode::ZP0),
        OpCode::new(0xec, "CPX", 3, 4, AddressingMode::ABS),


        /* Branching */

        OpCode::new(0x4c, "JMP", 3, 3, AddressingMode::NoneAddressing), //AddressingMode that acts as Immidiate
        OpCode::new(0x6c, "JMP", 3, 5, AddressingMode::NoneAddressing), //AddressingMode:Indirect with 6502 bug

        OpCode::new(0x20, "JSR", 3, 6, AddressingMode::NoneAddressing),
        OpCode::new(0x60, "RTS", 1, 6, AddressingMode::NoneAddressing),

        OpCode::new(0x40, "RTI", 1, 6, AddressingMode::NoneAddressing),

        OpCode::new(0xd0, "BNE", 2, 2 /*(+1 if branch succeeds +2 if to a new page)*/, AddressingMode::NoneAddressing),
        OpCode::new(0x70, "BVS", 2, 2 /*(+1 if branch succeeds +2 if to a new page)*/, AddressingMode::NoneAddressing),
        OpCode::new(0x50, "BVC", 2, 2 /*(+1 if branch succeeds +2 if to a new page)*/, AddressingMode::NoneAddressing),
        OpCode::new(0x30, "BMI", 2, 2 /*(+1 if branch succeeds +2 if to a new page)*/, AddressingMode::NoneAddressing),
        OpCode::new(0xf0, "BEQ", 2, 2 /*(+1 if branch succeeds +2 if to a new page)*/, AddressingMode::NoneAddressing),
        OpCode::new(0xb0, "BCS", 2, 2 /*(+1 if branch succeeds +2 if to a new page)*/, AddressingMode::NoneAddressing),
        OpCode::new(0x90, "BCC", 2, 2 /*(+1 if branch succeeds +2 if to a new page)*/, AddressingMode::NoneAddressing),
        OpCode::new(0x10, "BPL", 2, 2 /*(+1 if branch succeeds +2 if to a new page)*/, AddressingMode::NoneAddressing),

        OpCode::new(0x24, "BIT", 2, 3, AddressingMode::ZP0),
        OpCode::new(0x2c, "BIT", 3, 4, AddressingMode::ABS),


        /* Flags clear */

        OpCode::new(0xD8, "CLD", 1, 2, AddressingMode::NoneAddressing),
        OpCode::new(0x58, "CLI", 1, 2, AddressingMode::NoneAddressing),
        OpCode::new(0xb8, "CLV", 1, 2, AddressingMode::NoneAddressing),
        OpCode::new(0x18, "CLC", 1, 2, AddressingMode::NoneAddressing),
        OpCode::new(0x38, "SEC", 1, 2, AddressingMode::NoneAddressing),
        OpCode::new(0x78, "SEI", 1, 2, AddressingMode::NoneAddressing),
        OpCode::new(0xf8, "SED", 1, 2, AddressingMode::NoneAddressing),

        OpCode::new(0xaa, "TAX", 1, 2, AddressingMode::NoneAddressing),
        OpCode::new(0xa8, "TAY", 1, 2, AddressingMode::NoneAddressing),
        OpCode::new(0xba, "TSX", 1, 2, AddressingMode::NoneAddressing),
        OpCode::new(0x8a, "TXA", 1, 2, AddressingMode::NoneAddressing),
        OpCode::new(0x9a, "TXS", 1, 2, AddressingMode::NoneAddressing),
        OpCode::new(0x98, "TYA", 1, 2, AddressingMode::NoneAddressing),

        /* Stack */
        OpCode::new(0x48, "PHA", 1, 3, AddressingMode::NoneAddressing),
        OpCode::new(0x68, "PLA", 1, 4, AddressingMode::NoneAddressing),
        OpCode::new(0x08, "PHP", 1, 3, AddressingMode::NoneAddressing),
        OpCode::new(0x28, "PLP", 1, 4, AddressingMode::NoneAddressing),
    ];

}